#!/usr/bin/bash
# openstack cluster install common env variables

NUMBER_OF_CONTROLLERS=3
# Controller names will become ${CONTROLLER_NAME}-${i}[.${DOMAIN}] where ${i} = 1..${NUMBER_OF_CONTROLLERS}
export CONTROLLER_NAME="o3p-os-controller"
CONTROLLER_IP[1]=10.1.1.1
CONTROLLER_IP[2]=10.1.1.2
CONTROLLER_IP[3]=10.1.1.3
export CONTROLLER_IP1=${CONTROLLER_IP[1]}
export CONTROLLER_IP2=${CONTROLLER_IP[2]}
export CONTROLLER_IP3=${CONTROLLER_IP[3]}
export OVN_NB_DB=tcp:${CONTROLLER_IP1}:6641,tcp:${CONTROLLER_IP2}:6641,tcp:${CONTROLLER_IP3}:6641
export OVN_SB_DB=tcp:${CONTROLLER_IP1}:6642,tcp:${CONTROLLER_IP2}:6642,tcp:${CONTROLLER_IP3}:6642

NUMBER_OF_COMPUTE_NODES=2
# Compute names will become ${COMPUTE_NODE_NAME}-${i}[.${DOMAIN}] where ${i} = 1..${NUMBER_OF_COMPUTE_NODES}
export COMPUTE_NODE_NAME="o3p-os-compute"
COMPUTE_NODE_IP[1]=10.1.1.4
COMPUTE_NODE_IP[2]=10.1.1.5
COMPUTE_NODE_IP[3]=
export COMPUTE_NODE_IP1=${COMPUTE_NODE_IP[1]}
export COMPUTE_NODE_IP2=${COMPUTE_NODE_IP[2]}
export COMPUTE_NODE_IP3=${COMPUTE_NODE_IP[3]}

# domain suffix for controller chassis
export DOMAIN_NAME="oppp.lab"
export DNS_FORWARDER1="10.1.1.10"
export DNS_FORWARDER2="10.1.1.11"
export DNS_SERVERS="${CONTROLLER_IP1},${CONTROLLER_IP2},${CONTROLLER_IP3}"

# OVN-related stuff
export BR_INTERNAL=br-internal
BR_COMPUTE=br-compute
BR_PROVIDER=br-provider
ROUTER_PROVIDER=router-provider
ROUTER_COMPUTE=router-compute
OUI="2e:75:06"
OUI_MANUAL="2e:75:05"
MEDIAN_HA_CHASSIS_PRIORITY=16381

# Virtual keepalived IPs
export POSTGRES_IP="10.0.0.253"
export HAPROXY_IP="10.0.0.254"
# This IP is to get connected to hoziron dashboard isolated in the lab from another network via OVN router-compute DNAT to haproxy
export HAPROXY_PROXY_IP=

# Internal network is where linux containers are
export INTERNAL_NETWORK_NET=10.0.0.0
export INTERNAL_NETWORK_CIDR=${INTERNAL_NETWORK_NET}/24
export INTERNAL_NETWORK_MASK=255.255.255.0
export INTERNAL_NETWORK_REVERSE=0.0.10.in-addr.arpa
export INTERNAL_NETWORK_GATEWAY=10.0.0.1
INTERNAL_NETWORK_GATEWAY_CIDR=${INTERNAL_NETWORK_GATEWAY}/24
INTERNAL_NETWORK_GATEWAY_MAC="${OUI_MANUAL}:06:00:00"
INTER_ROUTER_COMPUTE_MAC="${OUI_MANUAL}:01:00:00"
INTERNAL_NETWORK_DHCP_SERVER_MAC="${OUI_MANUAL}:03:00:00"
INTERNAL_NETWORK_DHCP_LEASE_TIME=86400
INTERNAL_NETWORK_DHCP_EXCLUDE_IPS="${INTERNAL_NETWORK_GATEWAY} ${POSTGRES_IP} ${HAPROXY_IP}"

# Compute network is where compute and controller nodes are
export COMPUTE_NETWORK_IFACE=eth0
export COMPUTE_NETWORK_NET=10.1.1.0
export COMPUTE_NETWORK_CIDR=${COMPUTE_NETWORK_NET}/24
export COMPUTE_NETWORK_REVERSE=1.1.10.in-addr.arpa
export COMPUTE_NETWORK_MASK=255.255.255.0
export COMPUTE_NETWORK_DEFAULT_GATEWAY=10.1.1.254
COMPUTE_NETWORK_GATEWAY_MAC="${OUI_MANUAL}:02:00:00"
# COMPUTE_NETWORK_GATEWAY is COMPUTE_TO_INTERNAL_NETWORK gateway
export COMPUTE_NETWORK_GATEWAY=10.1.1.99
COMPUTE_NETWORK_ROUTER_PORT_IP=${COMPUTE_NETWORK_GATEWAY}
COMPUTE_NETWORK_ROUTER_PORT_IP_CIDR=${COMPUTE_NETWORK_ROUTER_PORT_IP}/24
COMPUTE_NETWORK_ROUTER_PORT_MAC="${OUI_MANUAL}:04:00:00"
# COMPUTE_NETWORK_OVS_BRIDGING_IFACE is used by OVN logical switch to bridge container traffic to the physical network 
export COMPUTE_NETWORK_OVS_BRIDGING_IFACE=eth2

# Provider network is external where floating IPs are
# This is the interface on compute nodes!
export PROVIDER_NETWORK_IFACE=eth1
EXTERNAL_NETWORK_GATEWAY=10.1.2.128
EXTERNAL_NETWORK_ROUTER_PORT_IP=10.1.2.149
EXTERNAL_NETWORK_ROUTER_PORT_IP_CIDR=${EXTERNAL_NETWORK_ROUTER_PORT_IP}/24
EXTERNAL_NETWORK_ROUTER_PORT_MAC="${OUI_MANUAL}:05:00:00"
INTER_ROUTER_PROVIDER_MAC="${OUI_MANUAL}:09:00:00"

# Versions, releases and repos
OPENSTACK_VERSION=victoria
OS_GIT_BRANCH="stable/${OPENSTACK_VERSION}"
GIT_REPO_URL="https://opendev.org/openstack"
GIT_OS_UPPER_CONSTRAINTS_URL="https://github.com/openstack/requirements/raw/${OS_GIT_BRANCH}/upper-constraints.txt"
NOVA_VERSION="22.2.1"
NEUTRON_VERSION="17.1.2"
CINDER_VERSION="17.1.0"
HORIZON_VERSION="18.6.2"
OVS_GIT_REPO="https://github.com/openvswitch/ovs.git"
OVN_GIT_REPO="https://github.com/ovn-org/ovn.git"
OVS_VERSION="v2.15.1"
OVN_VERSION="v21.06.0"
PYTHON_OPENSTACK_CLIENT_VERSION="5.5.0"
OSC_PLACEMENT_VERSION="3.0.1"
export RABBITMQ_VERSION="3.8.19"
RABBITMQ_ARCHIVE="rabbitmq-server-generic-unix-${RABBITMQ_VERSION}"
RABBITMQ_URL="https://github.com/rabbitmq/rabbitmq-server/releases/download/v${RABBITMQ_VERSION}/${RABBITMQ_ARCHIVE}.tar.xz"
MEMCACHED_VERSION="1.6.9"
MARIADB_VERSION="10.5"
MARIADB_KEY_URL="https://mariadb.org/mariadb_release_signing_key.asc"
MARIADB_REPO="deb [arch=amd64] https://mariadb.mirror.digitalpacific.com.au/repo/${MARIADB_VERSION}/ubuntu focal main"
HAPROXY_MAJOR_VERSION="2.3"
HAPROXY_MINOR_VERSION="9"
KEEPALIVED_VERSION="2.2.2"
KEEPALIVED_URL="https://keepalived.org/software/keepalived-${KEEPALIVED_VERSION}.tar.gz"
export KEEPALIVED_NOTIFICATION_EMAIL="user@example.com"
export KEEPALIVED_EMAIL_FROM="keepalived@o3p-os-controller-1.example.com"
export KEEPALIVED_SMTP_SERVER="0.0.0.0"
export KEEPALIVED_AUTH_PASS="Passw123"
export KEEPALIVED_IFACE=eth0

# Ceph cluster details
export CEPH_CLUSTER_ID=60a9c7d6-73e7-11eb-84e8-61b44d7d6dde
export CEPH_NODE_IP1=10.1.1.160
export CEPH_NODE_IP2=10.1.1.161
export CEPH_NODE_IP3=10.1.1.162
export CEPH_CONF="/etc/ceph/ceph.conf"
export CEPH_ADMIN_KEY="AQDwvDFgRf97BBAAj122lk7n1k726lh1vOlQSA=="
export CEPH_CLIENT="shareddata"
export CEPH_CLIENT_KEYRING="/etc/ceph/ceph.client.${CEPH_CLIENT}.keyring"
export CEPH_CLIENT_KEY="AQA/SGFgHIxzMhAAYiWiN9OOoPfM+C6xC4XReA=="
export RBD_POOL="myshareddata"
export CEPH_GLANCE_LOGIN=glance
export CEPH_GLANCE_POOL=myimages
export CEPH_GLANCE_KEY=AQCJQGFgepe+BxAAPTvkzr1EqMJhovsa343lrA==
export CEPH_CINDER_LOGIN=cinder2
export CEPH_CINDER_KEY="AQCw0Epg+qJzIBAALOwDFOU6Enq2n4hxT6XJBA=="
export CEPH_CINDER_POOL=myvolumes
export CEPH_REPO="deb https://download.ceph.com/debian-octopus/ focal main"
export CEPH_SIGNING_KEY_URL="https://download.ceph.com/keys/release.asc"
# Use 'uuidgen' to generate one
export CEPH_SECRET_CINDER_UUID="a78b24d5-0da6-4aa1-9188-2a6b4262a015"

if [[ -x /usr/bin/ovn-nbctl ]]; then
  export DHCP_OPTIONS=`ovn-nbctl find dhcp_options cidr="${INTERNAL_NETWORK_CIDR}"|grep _uuid|tr -d " "|cut -f2 -d":"`
  echo "DHCP_OPTIONS=${DHCP_OPTIONS}" 2>&1 | tee $0.log
fi

# Linux container details
export DOWNLOAD_KEYSERVER=pgp.mit.edu
# Container disto and its version ('ubuntu' and 'alpine' are supported as DOWNLOAD_DIST) 
export DOWNLOAD_DIST="alpine"
export DOWNLOAD_RELEASE="3.14"
export DOWNLOAD_ARCH="amd64"
# Container disk size (set to "2G" for ubuntu, "1G" for alpine)
export RBD_FSSIZE="1G"
# JOURNAL_VACCUM_SIZE is for systemd disto only (ubuntu)
export JOURNALCTL_VACUUM_SIZE=100M
# Syslod vars are for syslogd distro only (alpine)
# Syslog files to keep for daily rotation
export SYSLOG_FILES=7
# Max syslog file size in KB
export SYSLOG_SIZE=100000

# Openstack service account credentials and related vars
export POSTGRES_PASS=Password123
export KEYSTONE_DBPASS=Password123
export GLANCE_DBPASS=Password123
export PLACEMENT_DBPASS=Password123
export NOVA_DBPASS=Password123
export METADATA_PROXY_PASS=Password123
export RABBITMQ_PASS=Password123
export LIBVIRT_TYPE=qemu
export NEUTRON_DBPASS=Password123
export CINDER_DBPASS=Password123
export KEYSTONE_TOKEN_PROVIDER=fernet
export ADMIN_PASS=Password123
export METADATA_PROXY_PASS=Password123
export REGION=RegionOne
export TEST_PROJECT=o3p-project
export TEST_USER=o3p-user
export TEST_ROLE=o3p-role
export TEST_PASS=Password123

# TIME_ZONE is used by horizon (django local_settings.py file)
export TIME_ZONE=UTC

# Container names (pretty much arbitrary as the same constants are used literary in other places)
export RABBITMQ_CONTAINER_NAME=rabbitmq
export MEMCACHED_CONTAINER_NAME=memcached
export HAPROXY_CONTAINER_NAME=haproxy
#export SQL_CONTAINER_NAME=mariadb
export SQL_CONTAINER_NAME=postgres
export KEYSTONE_CONTAINER_NAME=keystone
export GLANCE_CONTAINER_NAME=glance
export PLACEMENT_CONTAINER_NAME=placement
export NOVA_CONTAINER_NAME=nova
export NEUTRON_CONTAINER_NAME=neutron
export CINDER_CONTAINER_NAME=cinder
export HORIZON_CONTAINER_NAME=horizon

# Openstack service endpoints
export OS_INTERNAL_ENDPOINT=${HAPROXY_CONTAINER_NAME}
export OS_PUBLIC_ENDPOINT=${OS_INTERNAL_ENDPOINT}
export OS_ADMIN_ENDPOINT=${OS_INTERNAL_ENDPOINT}

case "${SQL_CONTAINER_NAME}" in
"mariadb")
  PYMYSQL="pymysql"
  PSYCOPG2=""
  export SQL_DIALECT="mysql"
  export SQL_DRIVER="pymysql"
  export SLAVE_CONNECTION="#slave_connection"
;;
"postgres")
  PYMYSQL=""
  PSYCOPG2="py3-psycopg2"
  export SQL_DIALECT="postgresql"
  export SQL_DRIVER="psycopg2"
  export SLAVE_CONNECTION="slave_connection"
;;
esac

# Sample VM variables
# Packer is used to automatically build a cloud image from a sample OS image
PACKER_ARCHIVE="packer_1.7.2_linux_amd64.zip"
PACKER_URL="https://releases.hashicorp.com/packer/1.7.2/${PACKER_ARCHIVE}"
export SAMPLE_IMAGE_URL=https://dl-cdn.alpinelinux.org/alpine/v3.13/releases/x86_64/alpine-virt-3.13.5-x86_64.iso
export SAMPLE_IMAGE_FILE=alpine-virt-3.13.5-x86_64
export SAMPLE_VOLUME_SIZE=1
# The SAMPLE_NAME is shared for image, volume and server names
export SAMPLE_NAME=alpine
export DEFAULT_INTERNAL_NETWORK=internal-192.168.0.0
export DEFAULT_INTERNAL_NETWORK_GATEWAY=192.168.0.1
export OVN_METADATA_PORT_IP="192.168.0.254"
export DEFAULT_INTERNAL_NETWORK_CIDR=192.168.0.0/24
export DEFAULT_INTERNAL_NETWORK_DNS=8.8.8.8
export DEFAULT_INTERNAL_NETWORK_POOL="start=192.168.0.100,end=192.168.0.200"
export DEFAULT_EXTERNAL_NETWORK=external-10.1.2.0
export DEFAULT_EXTERNAL_NETWORK_GATEWAY=10.1.2.128
export DEFAULT_EXTERNAL_NETWORK_CIDR=10.1.2.0/24
export DEFAULT_EXTERNAL_NETWORK_POOL="start=10.1.2.210,end=10.1.2.219"

READY_TO_PROCEED=false
